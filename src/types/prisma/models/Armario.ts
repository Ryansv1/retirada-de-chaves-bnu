
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Armario` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Armario
 * 
 */
export type ArmarioModel = runtime.Types.Result.DefaultSelection<Prisma.$ArmarioPayload>

export type AggregateArmario = {
  _count: ArmarioCountAggregateOutputType | null
  _min: ArmarioMinAggregateOutputType | null
  _max: ArmarioMaxAggregateOutputType | null
}

export type ArmarioMinAggregateOutputType = {
  id: string | null
  codigo: string | null
  localizacao: $Enums.Localizacao | null
  bloco: string | null
  andar: string | null
}

export type ArmarioMaxAggregateOutputType = {
  id: string | null
  codigo: string | null
  localizacao: $Enums.Localizacao | null
  bloco: string | null
  andar: string | null
}

export type ArmarioCountAggregateOutputType = {
  id: number
  codigo: number
  localizacao: number
  bloco: number
  andar: number
  _all: number
}


export type ArmarioMinAggregateInputType = {
  id?: true
  codigo?: true
  localizacao?: true
  bloco?: true
  andar?: true
}

export type ArmarioMaxAggregateInputType = {
  id?: true
  codigo?: true
  localizacao?: true
  bloco?: true
  andar?: true
}

export type ArmarioCountAggregateInputType = {
  id?: true
  codigo?: true
  localizacao?: true
  bloco?: true
  andar?: true
  _all?: true
}

export type ArmarioAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Armario to aggregate.
   */
  where?: Prisma.ArmarioWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Armarios to fetch.
   */
  orderBy?: Prisma.ArmarioOrderByWithRelationInput | Prisma.ArmarioOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ArmarioWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Armarios from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Armarios.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Armarios
  **/
  _count?: true | ArmarioCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ArmarioMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ArmarioMaxAggregateInputType
}

export type GetArmarioAggregateType<T extends ArmarioAggregateArgs> = {
      [P in keyof T & keyof AggregateArmario]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateArmario[P]>
    : Prisma.GetScalarType<T[P], AggregateArmario[P]>
}




export type ArmarioGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ArmarioWhereInput
  orderBy?: Prisma.ArmarioOrderByWithAggregationInput | Prisma.ArmarioOrderByWithAggregationInput[]
  by: Prisma.ArmarioScalarFieldEnum[] | Prisma.ArmarioScalarFieldEnum
  having?: Prisma.ArmarioScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ArmarioCountAggregateInputType | true
  _min?: ArmarioMinAggregateInputType
  _max?: ArmarioMaxAggregateInputType
}

export type ArmarioGroupByOutputType = {
  id: string
  codigo: string
  localizacao: $Enums.Localizacao
  bloco: string
  andar: string
  _count: ArmarioCountAggregateOutputType | null
  _min: ArmarioMinAggregateOutputType | null
  _max: ArmarioMaxAggregateOutputType | null
}

type GetArmarioGroupByPayload<T extends ArmarioGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ArmarioGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ArmarioGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ArmarioGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ArmarioGroupByOutputType[P]>
      }
    >
  >



export type ArmarioWhereInput = {
  AND?: Prisma.ArmarioWhereInput | Prisma.ArmarioWhereInput[]
  OR?: Prisma.ArmarioWhereInput[]
  NOT?: Prisma.ArmarioWhereInput | Prisma.ArmarioWhereInput[]
  id?: Prisma.StringFilter<"Armario"> | string
  codigo?: Prisma.StringFilter<"Armario"> | string
  localizacao?: Prisma.EnumLocalizacaoFilter<"Armario"> | $Enums.Localizacao
  bloco?: Prisma.StringFilter<"Armario"> | string
  andar?: Prisma.StringFilter<"Armario"> | string
  Chave?: Prisma.XOR<Prisma.ChaveNullableScalarRelationFilter, Prisma.ChaveWhereInput> | null
}

export type ArmarioOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  codigo?: Prisma.SortOrder
  localizacao?: Prisma.SortOrder
  bloco?: Prisma.SortOrder
  andar?: Prisma.SortOrder
  Chave?: Prisma.ChaveOrderByWithRelationInput
}

export type ArmarioWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  codigo?: string
  AND?: Prisma.ArmarioWhereInput | Prisma.ArmarioWhereInput[]
  OR?: Prisma.ArmarioWhereInput[]
  NOT?: Prisma.ArmarioWhereInput | Prisma.ArmarioWhereInput[]
  localizacao?: Prisma.EnumLocalizacaoFilter<"Armario"> | $Enums.Localizacao
  bloco?: Prisma.StringFilter<"Armario"> | string
  andar?: Prisma.StringFilter<"Armario"> | string
  Chave?: Prisma.XOR<Prisma.ChaveNullableScalarRelationFilter, Prisma.ChaveWhereInput> | null
}, "id" | "codigo">

export type ArmarioOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  codigo?: Prisma.SortOrder
  localizacao?: Prisma.SortOrder
  bloco?: Prisma.SortOrder
  andar?: Prisma.SortOrder
  _count?: Prisma.ArmarioCountOrderByAggregateInput
  _max?: Prisma.ArmarioMaxOrderByAggregateInput
  _min?: Prisma.ArmarioMinOrderByAggregateInput
}

export type ArmarioScalarWhereWithAggregatesInput = {
  AND?: Prisma.ArmarioScalarWhereWithAggregatesInput | Prisma.ArmarioScalarWhereWithAggregatesInput[]
  OR?: Prisma.ArmarioScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ArmarioScalarWhereWithAggregatesInput | Prisma.ArmarioScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Armario"> | string
  codigo?: Prisma.StringWithAggregatesFilter<"Armario"> | string
  localizacao?: Prisma.EnumLocalizacaoWithAggregatesFilter<"Armario"> | $Enums.Localizacao
  bloco?: Prisma.StringWithAggregatesFilter<"Armario"> | string
  andar?: Prisma.StringWithAggregatesFilter<"Armario"> | string
}

export type ArmarioCreateInput = {
  id: string
  codigo: string
  localizacao: $Enums.Localizacao
  bloco: string
  andar: string
  Chave?: Prisma.ChaveCreateNestedOneWithoutArmarioInput
}

export type ArmarioUncheckedCreateInput = {
  id: string
  codigo: string
  localizacao: $Enums.Localizacao
  bloco: string
  andar: string
  Chave?: Prisma.ChaveUncheckedCreateNestedOneWithoutArmarioInput
}

export type ArmarioUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  localizacao?: Prisma.EnumLocalizacaoFieldUpdateOperationsInput | $Enums.Localizacao
  bloco?: Prisma.StringFieldUpdateOperationsInput | string
  andar?: Prisma.StringFieldUpdateOperationsInput | string
  Chave?: Prisma.ChaveUpdateOneWithoutArmarioNestedInput
}

export type ArmarioUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  localizacao?: Prisma.EnumLocalizacaoFieldUpdateOperationsInput | $Enums.Localizacao
  bloco?: Prisma.StringFieldUpdateOperationsInput | string
  andar?: Prisma.StringFieldUpdateOperationsInput | string
  Chave?: Prisma.ChaveUncheckedUpdateOneWithoutArmarioNestedInput
}

export type ArmarioCreateManyInput = {
  id: string
  codigo: string
  localizacao: $Enums.Localizacao
  bloco: string
  andar: string
}

export type ArmarioUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  localizacao?: Prisma.EnumLocalizacaoFieldUpdateOperationsInput | $Enums.Localizacao
  bloco?: Prisma.StringFieldUpdateOperationsInput | string
  andar?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ArmarioUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  localizacao?: Prisma.EnumLocalizacaoFieldUpdateOperationsInput | $Enums.Localizacao
  bloco?: Prisma.StringFieldUpdateOperationsInput | string
  andar?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ArmarioNullableScalarRelationFilter = {
  is?: Prisma.ArmarioWhereInput | null
  isNot?: Prisma.ArmarioWhereInput | null
}

export type ArmarioCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  codigo?: Prisma.SortOrder
  localizacao?: Prisma.SortOrder
  bloco?: Prisma.SortOrder
  andar?: Prisma.SortOrder
}

export type ArmarioMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  codigo?: Prisma.SortOrder
  localizacao?: Prisma.SortOrder
  bloco?: Prisma.SortOrder
  andar?: Prisma.SortOrder
}

export type ArmarioMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  codigo?: Prisma.SortOrder
  localizacao?: Prisma.SortOrder
  bloco?: Prisma.SortOrder
  andar?: Prisma.SortOrder
}

export type ArmarioCreateNestedOneWithoutChaveInput = {
  create?: Prisma.XOR<Prisma.ArmarioCreateWithoutChaveInput, Prisma.ArmarioUncheckedCreateWithoutChaveInput>
  connectOrCreate?: Prisma.ArmarioCreateOrConnectWithoutChaveInput
  connect?: Prisma.ArmarioWhereUniqueInput
}

export type ArmarioUpdateOneWithoutChaveNestedInput = {
  create?: Prisma.XOR<Prisma.ArmarioCreateWithoutChaveInput, Prisma.ArmarioUncheckedCreateWithoutChaveInput>
  connectOrCreate?: Prisma.ArmarioCreateOrConnectWithoutChaveInput
  upsert?: Prisma.ArmarioUpsertWithoutChaveInput
  disconnect?: Prisma.ArmarioWhereInput | boolean
  delete?: Prisma.ArmarioWhereInput | boolean
  connect?: Prisma.ArmarioWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ArmarioUpdateToOneWithWhereWithoutChaveInput, Prisma.ArmarioUpdateWithoutChaveInput>, Prisma.ArmarioUncheckedUpdateWithoutChaveInput>
}

export type ArmarioCreateWithoutChaveInput = {
  id: string
  codigo: string
  localizacao: $Enums.Localizacao
  bloco: string
  andar: string
}

export type ArmarioUncheckedCreateWithoutChaveInput = {
  id: string
  codigo: string
  localizacao: $Enums.Localizacao
  bloco: string
  andar: string
}

export type ArmarioCreateOrConnectWithoutChaveInput = {
  where: Prisma.ArmarioWhereUniqueInput
  create: Prisma.XOR<Prisma.ArmarioCreateWithoutChaveInput, Prisma.ArmarioUncheckedCreateWithoutChaveInput>
}

export type ArmarioUpsertWithoutChaveInput = {
  update: Prisma.XOR<Prisma.ArmarioUpdateWithoutChaveInput, Prisma.ArmarioUncheckedUpdateWithoutChaveInput>
  create: Prisma.XOR<Prisma.ArmarioCreateWithoutChaveInput, Prisma.ArmarioUncheckedCreateWithoutChaveInput>
  where?: Prisma.ArmarioWhereInput
}

export type ArmarioUpdateToOneWithWhereWithoutChaveInput = {
  where?: Prisma.ArmarioWhereInput
  data: Prisma.XOR<Prisma.ArmarioUpdateWithoutChaveInput, Prisma.ArmarioUncheckedUpdateWithoutChaveInput>
}

export type ArmarioUpdateWithoutChaveInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  localizacao?: Prisma.EnumLocalizacaoFieldUpdateOperationsInput | $Enums.Localizacao
  bloco?: Prisma.StringFieldUpdateOperationsInput | string
  andar?: Prisma.StringFieldUpdateOperationsInput | string
}

export type ArmarioUncheckedUpdateWithoutChaveInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  codigo?: Prisma.StringFieldUpdateOperationsInput | string
  localizacao?: Prisma.EnumLocalizacaoFieldUpdateOperationsInput | $Enums.Localizacao
  bloco?: Prisma.StringFieldUpdateOperationsInput | string
  andar?: Prisma.StringFieldUpdateOperationsInput | string
}



export type ArmarioSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  codigo?: boolean
  localizacao?: boolean
  bloco?: boolean
  andar?: boolean
  Chave?: boolean | Prisma.Armario$ChaveArgs<ExtArgs>
}, ExtArgs["result"]["armario"]>

export type ArmarioSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  codigo?: boolean
  localizacao?: boolean
  bloco?: boolean
  andar?: boolean
}, ExtArgs["result"]["armario"]>

export type ArmarioSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  codigo?: boolean
  localizacao?: boolean
  bloco?: boolean
  andar?: boolean
}, ExtArgs["result"]["armario"]>

export type ArmarioSelectScalar = {
  id?: boolean
  codigo?: boolean
  localizacao?: boolean
  bloco?: boolean
  andar?: boolean
}

export type ArmarioOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "codigo" | "localizacao" | "bloco" | "andar", ExtArgs["result"]["armario"]>
export type ArmarioInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Chave?: boolean | Prisma.Armario$ChaveArgs<ExtArgs>
}
export type ArmarioIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type ArmarioIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $ArmarioPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Armario"
  objects: {
    Chave: Prisma.$ChavePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    codigo: string
    localizacao: $Enums.Localizacao
    bloco: string
    andar: string
  }, ExtArgs["result"]["armario"]>
  composites: {}
}

export type ArmarioGetPayload<S extends boolean | null | undefined | ArmarioDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ArmarioPayload, S>

export type ArmarioCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ArmarioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ArmarioCountAggregateInputType | true
  }

export interface ArmarioDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Armario'], meta: { name: 'Armario' } }
  /**
   * Find zero or one Armario that matches the filter.
   * @param {ArmarioFindUniqueArgs} args - Arguments to find a Armario
   * @example
   * // Get one Armario
   * const armario = await prisma.armario.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ArmarioFindUniqueArgs>(args: Prisma.SelectSubset<T, ArmarioFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ArmarioClient<runtime.Types.Result.GetResult<Prisma.$ArmarioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Armario that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ArmarioFindUniqueOrThrowArgs} args - Arguments to find a Armario
   * @example
   * // Get one Armario
   * const armario = await prisma.armario.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ArmarioFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ArmarioFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ArmarioClient<runtime.Types.Result.GetResult<Prisma.$ArmarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Armario that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArmarioFindFirstArgs} args - Arguments to find a Armario
   * @example
   * // Get one Armario
   * const armario = await prisma.armario.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ArmarioFindFirstArgs>(args?: Prisma.SelectSubset<T, ArmarioFindFirstArgs<ExtArgs>>): Prisma.Prisma__ArmarioClient<runtime.Types.Result.GetResult<Prisma.$ArmarioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Armario that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArmarioFindFirstOrThrowArgs} args - Arguments to find a Armario
   * @example
   * // Get one Armario
   * const armario = await prisma.armario.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ArmarioFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ArmarioFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ArmarioClient<runtime.Types.Result.GetResult<Prisma.$ArmarioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Armarios that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArmarioFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Armarios
   * const armarios = await prisma.armario.findMany()
   * 
   * // Get first 10 Armarios
   * const armarios = await prisma.armario.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const armarioWithIdOnly = await prisma.armario.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ArmarioFindManyArgs>(args?: Prisma.SelectSubset<T, ArmarioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ArmarioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Armario.
   * @param {ArmarioCreateArgs} args - Arguments to create a Armario.
   * @example
   * // Create one Armario
   * const Armario = await prisma.armario.create({
   *   data: {
   *     // ... data to create a Armario
   *   }
   * })
   * 
   */
  create<T extends ArmarioCreateArgs>(args: Prisma.SelectSubset<T, ArmarioCreateArgs<ExtArgs>>): Prisma.Prisma__ArmarioClient<runtime.Types.Result.GetResult<Prisma.$ArmarioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Armarios.
   * @param {ArmarioCreateManyArgs} args - Arguments to create many Armarios.
   * @example
   * // Create many Armarios
   * const armario = await prisma.armario.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ArmarioCreateManyArgs>(args?: Prisma.SelectSubset<T, ArmarioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Armarios and returns the data saved in the database.
   * @param {ArmarioCreateManyAndReturnArgs} args - Arguments to create many Armarios.
   * @example
   * // Create many Armarios
   * const armario = await prisma.armario.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Armarios and only return the `id`
   * const armarioWithIdOnly = await prisma.armario.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ArmarioCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ArmarioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ArmarioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Armario.
   * @param {ArmarioDeleteArgs} args - Arguments to delete one Armario.
   * @example
   * // Delete one Armario
   * const Armario = await prisma.armario.delete({
   *   where: {
   *     // ... filter to delete one Armario
   *   }
   * })
   * 
   */
  delete<T extends ArmarioDeleteArgs>(args: Prisma.SelectSubset<T, ArmarioDeleteArgs<ExtArgs>>): Prisma.Prisma__ArmarioClient<runtime.Types.Result.GetResult<Prisma.$ArmarioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Armario.
   * @param {ArmarioUpdateArgs} args - Arguments to update one Armario.
   * @example
   * // Update one Armario
   * const armario = await prisma.armario.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ArmarioUpdateArgs>(args: Prisma.SelectSubset<T, ArmarioUpdateArgs<ExtArgs>>): Prisma.Prisma__ArmarioClient<runtime.Types.Result.GetResult<Prisma.$ArmarioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Armarios.
   * @param {ArmarioDeleteManyArgs} args - Arguments to filter Armarios to delete.
   * @example
   * // Delete a few Armarios
   * const { count } = await prisma.armario.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ArmarioDeleteManyArgs>(args?: Prisma.SelectSubset<T, ArmarioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Armarios.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArmarioUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Armarios
   * const armario = await prisma.armario.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ArmarioUpdateManyArgs>(args: Prisma.SelectSubset<T, ArmarioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Armarios and returns the data updated in the database.
   * @param {ArmarioUpdateManyAndReturnArgs} args - Arguments to update many Armarios.
   * @example
   * // Update many Armarios
   * const armario = await prisma.armario.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Armarios and only return the `id`
   * const armarioWithIdOnly = await prisma.armario.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ArmarioUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ArmarioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ArmarioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Armario.
   * @param {ArmarioUpsertArgs} args - Arguments to update or create a Armario.
   * @example
   * // Update or create a Armario
   * const armario = await prisma.armario.upsert({
   *   create: {
   *     // ... data to create a Armario
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Armario we want to update
   *   }
   * })
   */
  upsert<T extends ArmarioUpsertArgs>(args: Prisma.SelectSubset<T, ArmarioUpsertArgs<ExtArgs>>): Prisma.Prisma__ArmarioClient<runtime.Types.Result.GetResult<Prisma.$ArmarioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Armarios.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArmarioCountArgs} args - Arguments to filter Armarios to count.
   * @example
   * // Count the number of Armarios
   * const count = await prisma.armario.count({
   *   where: {
   *     // ... the filter for the Armarios we want to count
   *   }
   * })
  **/
  count<T extends ArmarioCountArgs>(
    args?: Prisma.Subset<T, ArmarioCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ArmarioCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Armario.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArmarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ArmarioAggregateArgs>(args: Prisma.Subset<T, ArmarioAggregateArgs>): Prisma.PrismaPromise<GetArmarioAggregateType<T>>

  /**
   * Group by Armario.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ArmarioGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ArmarioGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ArmarioGroupByArgs['orderBy'] }
      : { orderBy?: ArmarioGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ArmarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArmarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Armario model
 */
readonly fields: ArmarioFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Armario.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ArmarioClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Chave<T extends Prisma.Armario$ChaveArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Armario$ChaveArgs<ExtArgs>>): Prisma.Prisma__ChaveClient<runtime.Types.Result.GetResult<Prisma.$ChavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Armario model
 */
export interface ArmarioFieldRefs {
  readonly id: Prisma.FieldRef<"Armario", 'String'>
  readonly codigo: Prisma.FieldRef<"Armario", 'String'>
  readonly localizacao: Prisma.FieldRef<"Armario", 'Localizacao'>
  readonly bloco: Prisma.FieldRef<"Armario", 'String'>
  readonly andar: Prisma.FieldRef<"Armario", 'String'>
}
    

// Custom InputTypes
/**
 * Armario findUnique
 */
export type ArmarioFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArmarioInclude<ExtArgs> | null
  /**
   * Filter, which Armario to fetch.
   */
  where: Prisma.ArmarioWhereUniqueInput
}

/**
 * Armario findUniqueOrThrow
 */
export type ArmarioFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArmarioInclude<ExtArgs> | null
  /**
   * Filter, which Armario to fetch.
   */
  where: Prisma.ArmarioWhereUniqueInput
}

/**
 * Armario findFirst
 */
export type ArmarioFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArmarioInclude<ExtArgs> | null
  /**
   * Filter, which Armario to fetch.
   */
  where?: Prisma.ArmarioWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Armarios to fetch.
   */
  orderBy?: Prisma.ArmarioOrderByWithRelationInput | Prisma.ArmarioOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Armarios.
   */
  cursor?: Prisma.ArmarioWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Armarios from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Armarios.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Armarios.
   */
  distinct?: Prisma.ArmarioScalarFieldEnum | Prisma.ArmarioScalarFieldEnum[]
}

/**
 * Armario findFirstOrThrow
 */
export type ArmarioFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArmarioInclude<ExtArgs> | null
  /**
   * Filter, which Armario to fetch.
   */
  where?: Prisma.ArmarioWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Armarios to fetch.
   */
  orderBy?: Prisma.ArmarioOrderByWithRelationInput | Prisma.ArmarioOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Armarios.
   */
  cursor?: Prisma.ArmarioWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Armarios from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Armarios.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Armarios.
   */
  distinct?: Prisma.ArmarioScalarFieldEnum | Prisma.ArmarioScalarFieldEnum[]
}

/**
 * Armario findMany
 */
export type ArmarioFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArmarioInclude<ExtArgs> | null
  /**
   * Filter, which Armarios to fetch.
   */
  where?: Prisma.ArmarioWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Armarios to fetch.
   */
  orderBy?: Prisma.ArmarioOrderByWithRelationInput | Prisma.ArmarioOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Armarios.
   */
  cursor?: Prisma.ArmarioWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Armarios from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Armarios.
   */
  skip?: number
  distinct?: Prisma.ArmarioScalarFieldEnum | Prisma.ArmarioScalarFieldEnum[]
}

/**
 * Armario create
 */
export type ArmarioCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArmarioInclude<ExtArgs> | null
  /**
   * The data needed to create a Armario.
   */
  data: Prisma.XOR<Prisma.ArmarioCreateInput, Prisma.ArmarioUncheckedCreateInput>
}

/**
 * Armario createMany
 */
export type ArmarioCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Armarios.
   */
  data: Prisma.ArmarioCreateManyInput | Prisma.ArmarioCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Armario createManyAndReturn
 */
export type ArmarioCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * The data used to create many Armarios.
   */
  data: Prisma.ArmarioCreateManyInput | Prisma.ArmarioCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Armario update
 */
export type ArmarioUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArmarioInclude<ExtArgs> | null
  /**
   * The data needed to update a Armario.
   */
  data: Prisma.XOR<Prisma.ArmarioUpdateInput, Prisma.ArmarioUncheckedUpdateInput>
  /**
   * Choose, which Armario to update.
   */
  where: Prisma.ArmarioWhereUniqueInput
}

/**
 * Armario updateMany
 */
export type ArmarioUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Armarios.
   */
  data: Prisma.XOR<Prisma.ArmarioUpdateManyMutationInput, Prisma.ArmarioUncheckedUpdateManyInput>
  /**
   * Filter which Armarios to update
   */
  where?: Prisma.ArmarioWhereInput
  /**
   * Limit how many Armarios to update.
   */
  limit?: number
}

/**
 * Armario updateManyAndReturn
 */
export type ArmarioUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * The data used to update Armarios.
   */
  data: Prisma.XOR<Prisma.ArmarioUpdateManyMutationInput, Prisma.ArmarioUncheckedUpdateManyInput>
  /**
   * Filter which Armarios to update
   */
  where?: Prisma.ArmarioWhereInput
  /**
   * Limit how many Armarios to update.
   */
  limit?: number
}

/**
 * Armario upsert
 */
export type ArmarioUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArmarioInclude<ExtArgs> | null
  /**
   * The filter to search for the Armario to update in case it exists.
   */
  where: Prisma.ArmarioWhereUniqueInput
  /**
   * In case the Armario found by the `where` argument doesn't exist, create a new Armario with this data.
   */
  create: Prisma.XOR<Prisma.ArmarioCreateInput, Prisma.ArmarioUncheckedCreateInput>
  /**
   * In case the Armario was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ArmarioUpdateInput, Prisma.ArmarioUncheckedUpdateInput>
}

/**
 * Armario delete
 */
export type ArmarioDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArmarioInclude<ExtArgs> | null
  /**
   * Filter which Armario to delete.
   */
  where: Prisma.ArmarioWhereUniqueInput
}

/**
 * Armario deleteMany
 */
export type ArmarioDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Armarios to delete
   */
  where?: Prisma.ArmarioWhereInput
  /**
   * Limit how many Armarios to delete.
   */
  limit?: number
}

/**
 * Armario.Chave
 */
export type Armario$ChaveArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveInclude<ExtArgs> | null
  where?: Prisma.ChaveWhereInput
}

/**
 * Armario without action
 */
export type ArmarioDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArmarioInclude<ExtArgs> | null
}
