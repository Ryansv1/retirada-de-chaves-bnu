
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Chave` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Chave
 * 
 */
export type ChaveModel = runtime.Types.Result.DefaultSelection<Prisma.$ChavePayload>

export type AggregateChave = {
  _count: ChaveCountAggregateOutputType | null
  _min: ChaveMinAggregateOutputType | null
  _max: ChaveMaxAggregateOutputType | null
}

export type ChaveMinAggregateOutputType = {
  id: string | null
  ambienteId: string | null
  armarioId: string | null
  tipo: $Enums.TipoChave | null
}

export type ChaveMaxAggregateOutputType = {
  id: string | null
  ambienteId: string | null
  armarioId: string | null
  tipo: $Enums.TipoChave | null
}

export type ChaveCountAggregateOutputType = {
  id: number
  ambienteId: number
  armarioId: number
  tipo: number
  _all: number
}


export type ChaveMinAggregateInputType = {
  id?: true
  ambienteId?: true
  armarioId?: true
  tipo?: true
}

export type ChaveMaxAggregateInputType = {
  id?: true
  ambienteId?: true
  armarioId?: true
  tipo?: true
}

export type ChaveCountAggregateInputType = {
  id?: true
  ambienteId?: true
  armarioId?: true
  tipo?: true
  _all?: true
}

export type ChaveAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Chave to aggregate.
   */
  where?: Prisma.ChaveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chaves to fetch.
   */
  orderBy?: Prisma.ChaveOrderByWithRelationInput | Prisma.ChaveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ChaveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chaves from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chaves.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Chaves
  **/
  _count?: true | ChaveCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ChaveMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ChaveMaxAggregateInputType
}

export type GetChaveAggregateType<T extends ChaveAggregateArgs> = {
      [P in keyof T & keyof AggregateChave]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateChave[P]>
    : Prisma.GetScalarType<T[P], AggregateChave[P]>
}




export type ChaveGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ChaveWhereInput
  orderBy?: Prisma.ChaveOrderByWithAggregationInput | Prisma.ChaveOrderByWithAggregationInput[]
  by: Prisma.ChaveScalarFieldEnum[] | Prisma.ChaveScalarFieldEnum
  having?: Prisma.ChaveScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ChaveCountAggregateInputType | true
  _min?: ChaveMinAggregateInputType
  _max?: ChaveMaxAggregateInputType
}

export type ChaveGroupByOutputType = {
  id: string
  ambienteId: string | null
  armarioId: string | null
  tipo: $Enums.TipoChave
  _count: ChaveCountAggregateOutputType | null
  _min: ChaveMinAggregateOutputType | null
  _max: ChaveMaxAggregateOutputType | null
}

type GetChaveGroupByPayload<T extends ChaveGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ChaveGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ChaveGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ChaveGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ChaveGroupByOutputType[P]>
      }
    >
  >



export type ChaveWhereInput = {
  AND?: Prisma.ChaveWhereInput | Prisma.ChaveWhereInput[]
  OR?: Prisma.ChaveWhereInput[]
  NOT?: Prisma.ChaveWhereInput | Prisma.ChaveWhereInput[]
  id?: Prisma.StringFilter<"Chave"> | string
  ambienteId?: Prisma.StringNullableFilter<"Chave"> | string | null
  armarioId?: Prisma.StringNullableFilter<"Chave"> | string | null
  tipo?: Prisma.EnumTipoChaveFilter<"Chave"> | $Enums.TipoChave
  Ambiente?: Prisma.XOR<Prisma.AmbienteNullableScalarRelationFilter, Prisma.AmbienteWhereInput> | null
  Armario?: Prisma.XOR<Prisma.ArmarioNullableScalarRelationFilter, Prisma.ArmarioWhereInput> | null
  Emprestimo?: Prisma.EmprestimoListRelationFilter
  Chaves_Usuarios?: Prisma.Chaves_UsuariosListRelationFilter
}

export type ChaveOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  ambienteId?: Prisma.SortOrderInput | Prisma.SortOrder
  armarioId?: Prisma.SortOrderInput | Prisma.SortOrder
  tipo?: Prisma.SortOrder
  Ambiente?: Prisma.AmbienteOrderByWithRelationInput
  Armario?: Prisma.ArmarioOrderByWithRelationInput
  Emprestimo?: Prisma.EmprestimoOrderByRelationAggregateInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosOrderByRelationAggregateInput
}

export type ChaveWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  ambienteId?: string
  armarioId?: string
  AND?: Prisma.ChaveWhereInput | Prisma.ChaveWhereInput[]
  OR?: Prisma.ChaveWhereInput[]
  NOT?: Prisma.ChaveWhereInput | Prisma.ChaveWhereInput[]
  tipo?: Prisma.EnumTipoChaveFilter<"Chave"> | $Enums.TipoChave
  Ambiente?: Prisma.XOR<Prisma.AmbienteNullableScalarRelationFilter, Prisma.AmbienteWhereInput> | null
  Armario?: Prisma.XOR<Prisma.ArmarioNullableScalarRelationFilter, Prisma.ArmarioWhereInput> | null
  Emprestimo?: Prisma.EmprestimoListRelationFilter
  Chaves_Usuarios?: Prisma.Chaves_UsuariosListRelationFilter
}, "id" | "ambienteId" | "armarioId">

export type ChaveOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  ambienteId?: Prisma.SortOrderInput | Prisma.SortOrder
  armarioId?: Prisma.SortOrderInput | Prisma.SortOrder
  tipo?: Prisma.SortOrder
  _count?: Prisma.ChaveCountOrderByAggregateInput
  _max?: Prisma.ChaveMaxOrderByAggregateInput
  _min?: Prisma.ChaveMinOrderByAggregateInput
}

export type ChaveScalarWhereWithAggregatesInput = {
  AND?: Prisma.ChaveScalarWhereWithAggregatesInput | Prisma.ChaveScalarWhereWithAggregatesInput[]
  OR?: Prisma.ChaveScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ChaveScalarWhereWithAggregatesInput | Prisma.ChaveScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Chave"> | string
  ambienteId?: Prisma.StringNullableWithAggregatesFilter<"Chave"> | string | null
  armarioId?: Prisma.StringNullableWithAggregatesFilter<"Chave"> | string | null
  tipo?: Prisma.EnumTipoChaveWithAggregatesFilter<"Chave"> | $Enums.TipoChave
}

export type ChaveCreateInput = {
  id: string
  tipo: $Enums.TipoChave
  Ambiente?: Prisma.AmbienteCreateNestedOneWithoutChaveInput
  Armario?: Prisma.ArmarioCreateNestedOneWithoutChaveInput
  Emprestimo?: Prisma.EmprestimoCreateNestedManyWithoutChaveInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosCreateNestedManyWithoutChaveInput
}

export type ChaveUncheckedCreateInput = {
  id: string
  ambienteId?: string | null
  armarioId?: string | null
  tipo: $Enums.TipoChave
  Emprestimo?: Prisma.EmprestimoUncheckedCreateNestedManyWithoutChaveInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosUncheckedCreateNestedManyWithoutChaveInput
}

export type ChaveUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tipo?: Prisma.EnumTipoChaveFieldUpdateOperationsInput | $Enums.TipoChave
  Ambiente?: Prisma.AmbienteUpdateOneWithoutChaveNestedInput
  Armario?: Prisma.ArmarioUpdateOneWithoutChaveNestedInput
  Emprestimo?: Prisma.EmprestimoUpdateManyWithoutChaveNestedInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosUpdateManyWithoutChaveNestedInput
}

export type ChaveUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ambienteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  armarioId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumTipoChaveFieldUpdateOperationsInput | $Enums.TipoChave
  Emprestimo?: Prisma.EmprestimoUncheckedUpdateManyWithoutChaveNestedInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosUncheckedUpdateManyWithoutChaveNestedInput
}

export type ChaveCreateManyInput = {
  id: string
  ambienteId?: string | null
  armarioId?: string | null
  tipo: $Enums.TipoChave
}

export type ChaveUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tipo?: Prisma.EnumTipoChaveFieldUpdateOperationsInput | $Enums.TipoChave
}

export type ChaveUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ambienteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  armarioId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumTipoChaveFieldUpdateOperationsInput | $Enums.TipoChave
}

export type ChaveScalarRelationFilter = {
  is?: Prisma.ChaveWhereInput
  isNot?: Prisma.ChaveWhereInput
}

export type ChaveCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ambienteId?: Prisma.SortOrder
  armarioId?: Prisma.SortOrder
  tipo?: Prisma.SortOrder
}

export type ChaveMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ambienteId?: Prisma.SortOrder
  armarioId?: Prisma.SortOrder
  tipo?: Prisma.SortOrder
}

export type ChaveMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  ambienteId?: Prisma.SortOrder
  armarioId?: Prisma.SortOrder
  tipo?: Prisma.SortOrder
}

export type ChaveNullableScalarRelationFilter = {
  is?: Prisma.ChaveWhereInput | null
  isNot?: Prisma.ChaveWhereInput | null
}

export type ChaveCreateNestedOneWithoutEmprestimoInput = {
  create?: Prisma.XOR<Prisma.ChaveCreateWithoutEmprestimoInput, Prisma.ChaveUncheckedCreateWithoutEmprestimoInput>
  connectOrCreate?: Prisma.ChaveCreateOrConnectWithoutEmprestimoInput
  connect?: Prisma.ChaveWhereUniqueInput
}

export type ChaveUpdateOneRequiredWithoutEmprestimoNestedInput = {
  create?: Prisma.XOR<Prisma.ChaveCreateWithoutEmprestimoInput, Prisma.ChaveUncheckedCreateWithoutEmprestimoInput>
  connectOrCreate?: Prisma.ChaveCreateOrConnectWithoutEmprestimoInput
  upsert?: Prisma.ChaveUpsertWithoutEmprestimoInput
  connect?: Prisma.ChaveWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChaveUpdateToOneWithWhereWithoutEmprestimoInput, Prisma.ChaveUpdateWithoutEmprestimoInput>, Prisma.ChaveUncheckedUpdateWithoutEmprestimoInput>
}

export type EnumTipoChaveFieldUpdateOperationsInput = {
  set?: $Enums.TipoChave
}

export type ChaveCreateNestedOneWithoutChaves_UsuariosInput = {
  create?: Prisma.XOR<Prisma.ChaveCreateWithoutChaves_UsuariosInput, Prisma.ChaveUncheckedCreateWithoutChaves_UsuariosInput>
  connectOrCreate?: Prisma.ChaveCreateOrConnectWithoutChaves_UsuariosInput
  connect?: Prisma.ChaveWhereUniqueInput
}

export type ChaveUpdateOneRequiredWithoutChaves_UsuariosNestedInput = {
  create?: Prisma.XOR<Prisma.ChaveCreateWithoutChaves_UsuariosInput, Prisma.ChaveUncheckedCreateWithoutChaves_UsuariosInput>
  connectOrCreate?: Prisma.ChaveCreateOrConnectWithoutChaves_UsuariosInput
  upsert?: Prisma.ChaveUpsertWithoutChaves_UsuariosInput
  connect?: Prisma.ChaveWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChaveUpdateToOneWithWhereWithoutChaves_UsuariosInput, Prisma.ChaveUpdateWithoutChaves_UsuariosInput>, Prisma.ChaveUncheckedUpdateWithoutChaves_UsuariosInput>
}

export type ChaveCreateNestedOneWithoutAmbienteInput = {
  create?: Prisma.XOR<Prisma.ChaveCreateWithoutAmbienteInput, Prisma.ChaveUncheckedCreateWithoutAmbienteInput>
  connectOrCreate?: Prisma.ChaveCreateOrConnectWithoutAmbienteInput
  connect?: Prisma.ChaveWhereUniqueInput
}

export type ChaveUncheckedCreateNestedOneWithoutAmbienteInput = {
  create?: Prisma.XOR<Prisma.ChaveCreateWithoutAmbienteInput, Prisma.ChaveUncheckedCreateWithoutAmbienteInput>
  connectOrCreate?: Prisma.ChaveCreateOrConnectWithoutAmbienteInput
  connect?: Prisma.ChaveWhereUniqueInput
}

export type ChaveUpdateOneWithoutAmbienteNestedInput = {
  create?: Prisma.XOR<Prisma.ChaveCreateWithoutAmbienteInput, Prisma.ChaveUncheckedCreateWithoutAmbienteInput>
  connectOrCreate?: Prisma.ChaveCreateOrConnectWithoutAmbienteInput
  upsert?: Prisma.ChaveUpsertWithoutAmbienteInput
  disconnect?: Prisma.ChaveWhereInput | boolean
  delete?: Prisma.ChaveWhereInput | boolean
  connect?: Prisma.ChaveWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChaveUpdateToOneWithWhereWithoutAmbienteInput, Prisma.ChaveUpdateWithoutAmbienteInput>, Prisma.ChaveUncheckedUpdateWithoutAmbienteInput>
}

export type ChaveUncheckedUpdateOneWithoutAmbienteNestedInput = {
  create?: Prisma.XOR<Prisma.ChaveCreateWithoutAmbienteInput, Prisma.ChaveUncheckedCreateWithoutAmbienteInput>
  connectOrCreate?: Prisma.ChaveCreateOrConnectWithoutAmbienteInput
  upsert?: Prisma.ChaveUpsertWithoutAmbienteInput
  disconnect?: Prisma.ChaveWhereInput | boolean
  delete?: Prisma.ChaveWhereInput | boolean
  connect?: Prisma.ChaveWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChaveUpdateToOneWithWhereWithoutAmbienteInput, Prisma.ChaveUpdateWithoutAmbienteInput>, Prisma.ChaveUncheckedUpdateWithoutAmbienteInput>
}

export type ChaveCreateNestedOneWithoutArmarioInput = {
  create?: Prisma.XOR<Prisma.ChaveCreateWithoutArmarioInput, Prisma.ChaveUncheckedCreateWithoutArmarioInput>
  connectOrCreate?: Prisma.ChaveCreateOrConnectWithoutArmarioInput
  connect?: Prisma.ChaveWhereUniqueInput
}

export type ChaveUncheckedCreateNestedOneWithoutArmarioInput = {
  create?: Prisma.XOR<Prisma.ChaveCreateWithoutArmarioInput, Prisma.ChaveUncheckedCreateWithoutArmarioInput>
  connectOrCreate?: Prisma.ChaveCreateOrConnectWithoutArmarioInput
  connect?: Prisma.ChaveWhereUniqueInput
}

export type ChaveUpdateOneWithoutArmarioNestedInput = {
  create?: Prisma.XOR<Prisma.ChaveCreateWithoutArmarioInput, Prisma.ChaveUncheckedCreateWithoutArmarioInput>
  connectOrCreate?: Prisma.ChaveCreateOrConnectWithoutArmarioInput
  upsert?: Prisma.ChaveUpsertWithoutArmarioInput
  disconnect?: Prisma.ChaveWhereInput | boolean
  delete?: Prisma.ChaveWhereInput | boolean
  connect?: Prisma.ChaveWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChaveUpdateToOneWithWhereWithoutArmarioInput, Prisma.ChaveUpdateWithoutArmarioInput>, Prisma.ChaveUncheckedUpdateWithoutArmarioInput>
}

export type ChaveUncheckedUpdateOneWithoutArmarioNestedInput = {
  create?: Prisma.XOR<Prisma.ChaveCreateWithoutArmarioInput, Prisma.ChaveUncheckedCreateWithoutArmarioInput>
  connectOrCreate?: Prisma.ChaveCreateOrConnectWithoutArmarioInput
  upsert?: Prisma.ChaveUpsertWithoutArmarioInput
  disconnect?: Prisma.ChaveWhereInput | boolean
  delete?: Prisma.ChaveWhereInput | boolean
  connect?: Prisma.ChaveWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ChaveUpdateToOneWithWhereWithoutArmarioInput, Prisma.ChaveUpdateWithoutArmarioInput>, Prisma.ChaveUncheckedUpdateWithoutArmarioInput>
}

export type ChaveCreateWithoutEmprestimoInput = {
  id: string
  tipo: $Enums.TipoChave
  Ambiente?: Prisma.AmbienteCreateNestedOneWithoutChaveInput
  Armario?: Prisma.ArmarioCreateNestedOneWithoutChaveInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosCreateNestedManyWithoutChaveInput
}

export type ChaveUncheckedCreateWithoutEmprestimoInput = {
  id: string
  ambienteId?: string | null
  armarioId?: string | null
  tipo: $Enums.TipoChave
  Chaves_Usuarios?: Prisma.Chaves_UsuariosUncheckedCreateNestedManyWithoutChaveInput
}

export type ChaveCreateOrConnectWithoutEmprestimoInput = {
  where: Prisma.ChaveWhereUniqueInput
  create: Prisma.XOR<Prisma.ChaveCreateWithoutEmprestimoInput, Prisma.ChaveUncheckedCreateWithoutEmprestimoInput>
}

export type ChaveUpsertWithoutEmprestimoInput = {
  update: Prisma.XOR<Prisma.ChaveUpdateWithoutEmprestimoInput, Prisma.ChaveUncheckedUpdateWithoutEmprestimoInput>
  create: Prisma.XOR<Prisma.ChaveCreateWithoutEmprestimoInput, Prisma.ChaveUncheckedCreateWithoutEmprestimoInput>
  where?: Prisma.ChaveWhereInput
}

export type ChaveUpdateToOneWithWhereWithoutEmprestimoInput = {
  where?: Prisma.ChaveWhereInput
  data: Prisma.XOR<Prisma.ChaveUpdateWithoutEmprestimoInput, Prisma.ChaveUncheckedUpdateWithoutEmprestimoInput>
}

export type ChaveUpdateWithoutEmprestimoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tipo?: Prisma.EnumTipoChaveFieldUpdateOperationsInput | $Enums.TipoChave
  Ambiente?: Prisma.AmbienteUpdateOneWithoutChaveNestedInput
  Armario?: Prisma.ArmarioUpdateOneWithoutChaveNestedInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosUpdateManyWithoutChaveNestedInput
}

export type ChaveUncheckedUpdateWithoutEmprestimoInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ambienteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  armarioId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumTipoChaveFieldUpdateOperationsInput | $Enums.TipoChave
  Chaves_Usuarios?: Prisma.Chaves_UsuariosUncheckedUpdateManyWithoutChaveNestedInput
}

export type ChaveCreateWithoutChaves_UsuariosInput = {
  id: string
  tipo: $Enums.TipoChave
  Ambiente?: Prisma.AmbienteCreateNestedOneWithoutChaveInput
  Armario?: Prisma.ArmarioCreateNestedOneWithoutChaveInput
  Emprestimo?: Prisma.EmprestimoCreateNestedManyWithoutChaveInput
}

export type ChaveUncheckedCreateWithoutChaves_UsuariosInput = {
  id: string
  ambienteId?: string | null
  armarioId?: string | null
  tipo: $Enums.TipoChave
  Emprestimo?: Prisma.EmprestimoUncheckedCreateNestedManyWithoutChaveInput
}

export type ChaveCreateOrConnectWithoutChaves_UsuariosInput = {
  where: Prisma.ChaveWhereUniqueInput
  create: Prisma.XOR<Prisma.ChaveCreateWithoutChaves_UsuariosInput, Prisma.ChaveUncheckedCreateWithoutChaves_UsuariosInput>
}

export type ChaveUpsertWithoutChaves_UsuariosInput = {
  update: Prisma.XOR<Prisma.ChaveUpdateWithoutChaves_UsuariosInput, Prisma.ChaveUncheckedUpdateWithoutChaves_UsuariosInput>
  create: Prisma.XOR<Prisma.ChaveCreateWithoutChaves_UsuariosInput, Prisma.ChaveUncheckedCreateWithoutChaves_UsuariosInput>
  where?: Prisma.ChaveWhereInput
}

export type ChaveUpdateToOneWithWhereWithoutChaves_UsuariosInput = {
  where?: Prisma.ChaveWhereInput
  data: Prisma.XOR<Prisma.ChaveUpdateWithoutChaves_UsuariosInput, Prisma.ChaveUncheckedUpdateWithoutChaves_UsuariosInput>
}

export type ChaveUpdateWithoutChaves_UsuariosInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tipo?: Prisma.EnumTipoChaveFieldUpdateOperationsInput | $Enums.TipoChave
  Ambiente?: Prisma.AmbienteUpdateOneWithoutChaveNestedInput
  Armario?: Prisma.ArmarioUpdateOneWithoutChaveNestedInput
  Emprestimo?: Prisma.EmprestimoUpdateManyWithoutChaveNestedInput
}

export type ChaveUncheckedUpdateWithoutChaves_UsuariosInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ambienteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  armarioId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumTipoChaveFieldUpdateOperationsInput | $Enums.TipoChave
  Emprestimo?: Prisma.EmprestimoUncheckedUpdateManyWithoutChaveNestedInput
}

export type ChaveCreateWithoutAmbienteInput = {
  id: string
  tipo: $Enums.TipoChave
  Armario?: Prisma.ArmarioCreateNestedOneWithoutChaveInput
  Emprestimo?: Prisma.EmprestimoCreateNestedManyWithoutChaveInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosCreateNestedManyWithoutChaveInput
}

export type ChaveUncheckedCreateWithoutAmbienteInput = {
  id: string
  armarioId?: string | null
  tipo: $Enums.TipoChave
  Emprestimo?: Prisma.EmprestimoUncheckedCreateNestedManyWithoutChaveInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosUncheckedCreateNestedManyWithoutChaveInput
}

export type ChaveCreateOrConnectWithoutAmbienteInput = {
  where: Prisma.ChaveWhereUniqueInput
  create: Prisma.XOR<Prisma.ChaveCreateWithoutAmbienteInput, Prisma.ChaveUncheckedCreateWithoutAmbienteInput>
}

export type ChaveUpsertWithoutAmbienteInput = {
  update: Prisma.XOR<Prisma.ChaveUpdateWithoutAmbienteInput, Prisma.ChaveUncheckedUpdateWithoutAmbienteInput>
  create: Prisma.XOR<Prisma.ChaveCreateWithoutAmbienteInput, Prisma.ChaveUncheckedCreateWithoutAmbienteInput>
  where?: Prisma.ChaveWhereInput
}

export type ChaveUpdateToOneWithWhereWithoutAmbienteInput = {
  where?: Prisma.ChaveWhereInput
  data: Prisma.XOR<Prisma.ChaveUpdateWithoutAmbienteInput, Prisma.ChaveUncheckedUpdateWithoutAmbienteInput>
}

export type ChaveUpdateWithoutAmbienteInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tipo?: Prisma.EnumTipoChaveFieldUpdateOperationsInput | $Enums.TipoChave
  Armario?: Prisma.ArmarioUpdateOneWithoutChaveNestedInput
  Emprestimo?: Prisma.EmprestimoUpdateManyWithoutChaveNestedInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosUpdateManyWithoutChaveNestedInput
}

export type ChaveUncheckedUpdateWithoutAmbienteInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  armarioId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumTipoChaveFieldUpdateOperationsInput | $Enums.TipoChave
  Emprestimo?: Prisma.EmprestimoUncheckedUpdateManyWithoutChaveNestedInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosUncheckedUpdateManyWithoutChaveNestedInput
}

export type ChaveCreateWithoutArmarioInput = {
  id: string
  tipo: $Enums.TipoChave
  Ambiente?: Prisma.AmbienteCreateNestedOneWithoutChaveInput
  Emprestimo?: Prisma.EmprestimoCreateNestedManyWithoutChaveInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosCreateNestedManyWithoutChaveInput
}

export type ChaveUncheckedCreateWithoutArmarioInput = {
  id: string
  ambienteId?: string | null
  tipo: $Enums.TipoChave
  Emprestimo?: Prisma.EmprestimoUncheckedCreateNestedManyWithoutChaveInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosUncheckedCreateNestedManyWithoutChaveInput
}

export type ChaveCreateOrConnectWithoutArmarioInput = {
  where: Prisma.ChaveWhereUniqueInput
  create: Prisma.XOR<Prisma.ChaveCreateWithoutArmarioInput, Prisma.ChaveUncheckedCreateWithoutArmarioInput>
}

export type ChaveUpsertWithoutArmarioInput = {
  update: Prisma.XOR<Prisma.ChaveUpdateWithoutArmarioInput, Prisma.ChaveUncheckedUpdateWithoutArmarioInput>
  create: Prisma.XOR<Prisma.ChaveCreateWithoutArmarioInput, Prisma.ChaveUncheckedCreateWithoutArmarioInput>
  where?: Prisma.ChaveWhereInput
}

export type ChaveUpdateToOneWithWhereWithoutArmarioInput = {
  where?: Prisma.ChaveWhereInput
  data: Prisma.XOR<Prisma.ChaveUpdateWithoutArmarioInput, Prisma.ChaveUncheckedUpdateWithoutArmarioInput>
}

export type ChaveUpdateWithoutArmarioInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  tipo?: Prisma.EnumTipoChaveFieldUpdateOperationsInput | $Enums.TipoChave
  Ambiente?: Prisma.AmbienteUpdateOneWithoutChaveNestedInput
  Emprestimo?: Prisma.EmprestimoUpdateManyWithoutChaveNestedInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosUpdateManyWithoutChaveNestedInput
}

export type ChaveUncheckedUpdateWithoutArmarioInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  ambienteId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  tipo?: Prisma.EnumTipoChaveFieldUpdateOperationsInput | $Enums.TipoChave
  Emprestimo?: Prisma.EmprestimoUncheckedUpdateManyWithoutChaveNestedInput
  Chaves_Usuarios?: Prisma.Chaves_UsuariosUncheckedUpdateManyWithoutChaveNestedInput
}


/**
 * Count Type ChaveCountOutputType
 */

export type ChaveCountOutputType = {
  Emprestimo: number
  Chaves_Usuarios: number
}

export type ChaveCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Emprestimo?: boolean | ChaveCountOutputTypeCountEmprestimoArgs
  Chaves_Usuarios?: boolean | ChaveCountOutputTypeCountChaves_UsuariosArgs
}

/**
 * ChaveCountOutputType without action
 */
export type ChaveCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ChaveCountOutputType
   */
  select?: Prisma.ChaveCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ChaveCountOutputType without action
 */
export type ChaveCountOutputTypeCountEmprestimoArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EmprestimoWhereInput
}

/**
 * ChaveCountOutputType without action
 */
export type ChaveCountOutputTypeCountChaves_UsuariosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.Chaves_UsuariosWhereInput
}


export type ChaveSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ambienteId?: boolean
  armarioId?: boolean
  tipo?: boolean
  Ambiente?: boolean | Prisma.Chave$AmbienteArgs<ExtArgs>
  Armario?: boolean | Prisma.Chave$ArmarioArgs<ExtArgs>
  Emprestimo?: boolean | Prisma.Chave$EmprestimoArgs<ExtArgs>
  Chaves_Usuarios?: boolean | Prisma.Chave$Chaves_UsuariosArgs<ExtArgs>
  _count?: boolean | Prisma.ChaveCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["chave"]>

export type ChaveSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ambienteId?: boolean
  armarioId?: boolean
  tipo?: boolean
  Ambiente?: boolean | Prisma.Chave$AmbienteArgs<ExtArgs>
  Armario?: boolean | Prisma.Chave$ArmarioArgs<ExtArgs>
}, ExtArgs["result"]["chave"]>

export type ChaveSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  ambienteId?: boolean
  armarioId?: boolean
  tipo?: boolean
  Ambiente?: boolean | Prisma.Chave$AmbienteArgs<ExtArgs>
  Armario?: boolean | Prisma.Chave$ArmarioArgs<ExtArgs>
}, ExtArgs["result"]["chave"]>

export type ChaveSelectScalar = {
  id?: boolean
  ambienteId?: boolean
  armarioId?: boolean
  tipo?: boolean
}

export type ChaveOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "ambienteId" | "armarioId" | "tipo", ExtArgs["result"]["chave"]>
export type ChaveInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Ambiente?: boolean | Prisma.Chave$AmbienteArgs<ExtArgs>
  Armario?: boolean | Prisma.Chave$ArmarioArgs<ExtArgs>
  Emprestimo?: boolean | Prisma.Chave$EmprestimoArgs<ExtArgs>
  Chaves_Usuarios?: boolean | Prisma.Chave$Chaves_UsuariosArgs<ExtArgs>
  _count?: boolean | Prisma.ChaveCountOutputTypeDefaultArgs<ExtArgs>
}
export type ChaveIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Ambiente?: boolean | Prisma.Chave$AmbienteArgs<ExtArgs>
  Armario?: boolean | Prisma.Chave$ArmarioArgs<ExtArgs>
}
export type ChaveIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  Ambiente?: boolean | Prisma.Chave$AmbienteArgs<ExtArgs>
  Armario?: boolean | Prisma.Chave$ArmarioArgs<ExtArgs>
}

export type $ChavePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Chave"
  objects: {
    Ambiente: Prisma.$AmbientePayload<ExtArgs> | null
    Armario: Prisma.$ArmarioPayload<ExtArgs> | null
    Emprestimo: Prisma.$EmprestimoPayload<ExtArgs>[]
    Chaves_Usuarios: Prisma.$Chaves_UsuariosPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    ambienteId: string | null
    armarioId: string | null
    tipo: $Enums.TipoChave
  }, ExtArgs["result"]["chave"]>
  composites: {}
}

export type ChaveGetPayload<S extends boolean | null | undefined | ChaveDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ChavePayload, S>

export type ChaveCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ChaveFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ChaveCountAggregateInputType | true
  }

export interface ChaveDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chave'], meta: { name: 'Chave' } }
  /**
   * Find zero or one Chave that matches the filter.
   * @param {ChaveFindUniqueArgs} args - Arguments to find a Chave
   * @example
   * // Get one Chave
   * const chave = await prisma.chave.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ChaveFindUniqueArgs>(args: Prisma.SelectSubset<T, ChaveFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ChaveClient<runtime.Types.Result.GetResult<Prisma.$ChavePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Chave that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ChaveFindUniqueOrThrowArgs} args - Arguments to find a Chave
   * @example
   * // Get one Chave
   * const chave = await prisma.chave.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ChaveFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ChaveFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChaveClient<runtime.Types.Result.GetResult<Prisma.$ChavePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chave that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChaveFindFirstArgs} args - Arguments to find a Chave
   * @example
   * // Get one Chave
   * const chave = await prisma.chave.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ChaveFindFirstArgs>(args?: Prisma.SelectSubset<T, ChaveFindFirstArgs<ExtArgs>>): Prisma.Prisma__ChaveClient<runtime.Types.Result.GetResult<Prisma.$ChavePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Chave that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChaveFindFirstOrThrowArgs} args - Arguments to find a Chave
   * @example
   * // Get one Chave
   * const chave = await prisma.chave.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ChaveFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ChaveFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ChaveClient<runtime.Types.Result.GetResult<Prisma.$ChavePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Chaves that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChaveFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Chaves
   * const chaves = await prisma.chave.findMany()
   * 
   * // Get first 10 Chaves
   * const chaves = await prisma.chave.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const chaveWithIdOnly = await prisma.chave.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ChaveFindManyArgs>(args?: Prisma.SelectSubset<T, ChaveFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChavePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Chave.
   * @param {ChaveCreateArgs} args - Arguments to create a Chave.
   * @example
   * // Create one Chave
   * const Chave = await prisma.chave.create({
   *   data: {
   *     // ... data to create a Chave
   *   }
   * })
   * 
   */
  create<T extends ChaveCreateArgs>(args: Prisma.SelectSubset<T, ChaveCreateArgs<ExtArgs>>): Prisma.Prisma__ChaveClient<runtime.Types.Result.GetResult<Prisma.$ChavePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Chaves.
   * @param {ChaveCreateManyArgs} args - Arguments to create many Chaves.
   * @example
   * // Create many Chaves
   * const chave = await prisma.chave.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ChaveCreateManyArgs>(args?: Prisma.SelectSubset<T, ChaveCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Chaves and returns the data saved in the database.
   * @param {ChaveCreateManyAndReturnArgs} args - Arguments to create many Chaves.
   * @example
   * // Create many Chaves
   * const chave = await prisma.chave.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Chaves and only return the `id`
   * const chaveWithIdOnly = await prisma.chave.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ChaveCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ChaveCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChavePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Chave.
   * @param {ChaveDeleteArgs} args - Arguments to delete one Chave.
   * @example
   * // Delete one Chave
   * const Chave = await prisma.chave.delete({
   *   where: {
   *     // ... filter to delete one Chave
   *   }
   * })
   * 
   */
  delete<T extends ChaveDeleteArgs>(args: Prisma.SelectSubset<T, ChaveDeleteArgs<ExtArgs>>): Prisma.Prisma__ChaveClient<runtime.Types.Result.GetResult<Prisma.$ChavePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Chave.
   * @param {ChaveUpdateArgs} args - Arguments to update one Chave.
   * @example
   * // Update one Chave
   * const chave = await prisma.chave.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ChaveUpdateArgs>(args: Prisma.SelectSubset<T, ChaveUpdateArgs<ExtArgs>>): Prisma.Prisma__ChaveClient<runtime.Types.Result.GetResult<Prisma.$ChavePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Chaves.
   * @param {ChaveDeleteManyArgs} args - Arguments to filter Chaves to delete.
   * @example
   * // Delete a few Chaves
   * const { count } = await prisma.chave.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ChaveDeleteManyArgs>(args?: Prisma.SelectSubset<T, ChaveDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chaves.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChaveUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Chaves
   * const chave = await prisma.chave.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ChaveUpdateManyArgs>(args: Prisma.SelectSubset<T, ChaveUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Chaves and returns the data updated in the database.
   * @param {ChaveUpdateManyAndReturnArgs} args - Arguments to update many Chaves.
   * @example
   * // Update many Chaves
   * const chave = await prisma.chave.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Chaves and only return the `id`
   * const chaveWithIdOnly = await prisma.chave.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ChaveUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ChaveUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ChavePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Chave.
   * @param {ChaveUpsertArgs} args - Arguments to update or create a Chave.
   * @example
   * // Update or create a Chave
   * const chave = await prisma.chave.upsert({
   *   create: {
   *     // ... data to create a Chave
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Chave we want to update
   *   }
   * })
   */
  upsert<T extends ChaveUpsertArgs>(args: Prisma.SelectSubset<T, ChaveUpsertArgs<ExtArgs>>): Prisma.Prisma__ChaveClient<runtime.Types.Result.GetResult<Prisma.$ChavePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Chaves.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChaveCountArgs} args - Arguments to filter Chaves to count.
   * @example
   * // Count the number of Chaves
   * const count = await prisma.chave.count({
   *   where: {
   *     // ... the filter for the Chaves we want to count
   *   }
   * })
  **/
  count<T extends ChaveCountArgs>(
    args?: Prisma.Subset<T, ChaveCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ChaveCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Chave.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChaveAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ChaveAggregateArgs>(args: Prisma.Subset<T, ChaveAggregateArgs>): Prisma.PrismaPromise<GetChaveAggregateType<T>>

  /**
   * Group by Chave.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ChaveGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ChaveGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ChaveGroupByArgs['orderBy'] }
      : { orderBy?: ChaveGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ChaveGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChaveGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Chave model
 */
readonly fields: ChaveFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Chave.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ChaveClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  Ambiente<T extends Prisma.Chave$AmbienteArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Chave$AmbienteArgs<ExtArgs>>): Prisma.Prisma__AmbienteClient<runtime.Types.Result.GetResult<Prisma.$AmbientePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  Armario<T extends Prisma.Chave$ArmarioArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Chave$ArmarioArgs<ExtArgs>>): Prisma.Prisma__ArmarioClient<runtime.Types.Result.GetResult<Prisma.$ArmarioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  Emprestimo<T extends Prisma.Chave$EmprestimoArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Chave$EmprestimoArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EmprestimoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  Chaves_Usuarios<T extends Prisma.Chave$Chaves_UsuariosArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Chave$Chaves_UsuariosArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$Chaves_UsuariosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Chave model
 */
export interface ChaveFieldRefs {
  readonly id: Prisma.FieldRef<"Chave", 'String'>
  readonly ambienteId: Prisma.FieldRef<"Chave", 'String'>
  readonly armarioId: Prisma.FieldRef<"Chave", 'String'>
  readonly tipo: Prisma.FieldRef<"Chave", 'TipoChave'>
}
    

// Custom InputTypes
/**
 * Chave findUnique
 */
export type ChaveFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveInclude<ExtArgs> | null
  /**
   * Filter, which Chave to fetch.
   */
  where: Prisma.ChaveWhereUniqueInput
}

/**
 * Chave findUniqueOrThrow
 */
export type ChaveFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveInclude<ExtArgs> | null
  /**
   * Filter, which Chave to fetch.
   */
  where: Prisma.ChaveWhereUniqueInput
}

/**
 * Chave findFirst
 */
export type ChaveFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveInclude<ExtArgs> | null
  /**
   * Filter, which Chave to fetch.
   */
  where?: Prisma.ChaveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chaves to fetch.
   */
  orderBy?: Prisma.ChaveOrderByWithRelationInput | Prisma.ChaveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Chaves.
   */
  cursor?: Prisma.ChaveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chaves from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chaves.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Chaves.
   */
  distinct?: Prisma.ChaveScalarFieldEnum | Prisma.ChaveScalarFieldEnum[]
}

/**
 * Chave findFirstOrThrow
 */
export type ChaveFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveInclude<ExtArgs> | null
  /**
   * Filter, which Chave to fetch.
   */
  where?: Prisma.ChaveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chaves to fetch.
   */
  orderBy?: Prisma.ChaveOrderByWithRelationInput | Prisma.ChaveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Chaves.
   */
  cursor?: Prisma.ChaveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chaves from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chaves.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Chaves.
   */
  distinct?: Prisma.ChaveScalarFieldEnum | Prisma.ChaveScalarFieldEnum[]
}

/**
 * Chave findMany
 */
export type ChaveFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveInclude<ExtArgs> | null
  /**
   * Filter, which Chaves to fetch.
   */
  where?: Prisma.ChaveWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Chaves to fetch.
   */
  orderBy?: Prisma.ChaveOrderByWithRelationInput | Prisma.ChaveOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Chaves.
   */
  cursor?: Prisma.ChaveWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Chaves from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Chaves.
   */
  skip?: number
  distinct?: Prisma.ChaveScalarFieldEnum | Prisma.ChaveScalarFieldEnum[]
}

/**
 * Chave create
 */
export type ChaveCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveInclude<ExtArgs> | null
  /**
   * The data needed to create a Chave.
   */
  data: Prisma.XOR<Prisma.ChaveCreateInput, Prisma.ChaveUncheckedCreateInput>
}

/**
 * Chave createMany
 */
export type ChaveCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Chaves.
   */
  data: Prisma.ChaveCreateManyInput | Prisma.ChaveCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Chave createManyAndReturn
 */
export type ChaveCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * The data used to create many Chaves.
   */
  data: Prisma.ChaveCreateManyInput | Prisma.ChaveCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Chave update
 */
export type ChaveUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveInclude<ExtArgs> | null
  /**
   * The data needed to update a Chave.
   */
  data: Prisma.XOR<Prisma.ChaveUpdateInput, Prisma.ChaveUncheckedUpdateInput>
  /**
   * Choose, which Chave to update.
   */
  where: Prisma.ChaveWhereUniqueInput
}

/**
 * Chave updateMany
 */
export type ChaveUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Chaves.
   */
  data: Prisma.XOR<Prisma.ChaveUpdateManyMutationInput, Prisma.ChaveUncheckedUpdateManyInput>
  /**
   * Filter which Chaves to update
   */
  where?: Prisma.ChaveWhereInput
  /**
   * Limit how many Chaves to update.
   */
  limit?: number
}

/**
 * Chave updateManyAndReturn
 */
export type ChaveUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * The data used to update Chaves.
   */
  data: Prisma.XOR<Prisma.ChaveUpdateManyMutationInput, Prisma.ChaveUncheckedUpdateManyInput>
  /**
   * Filter which Chaves to update
   */
  where?: Prisma.ChaveWhereInput
  /**
   * Limit how many Chaves to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Chave upsert
 */
export type ChaveUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveInclude<ExtArgs> | null
  /**
   * The filter to search for the Chave to update in case it exists.
   */
  where: Prisma.ChaveWhereUniqueInput
  /**
   * In case the Chave found by the `where` argument doesn't exist, create a new Chave with this data.
   */
  create: Prisma.XOR<Prisma.ChaveCreateInput, Prisma.ChaveUncheckedCreateInput>
  /**
   * In case the Chave was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ChaveUpdateInput, Prisma.ChaveUncheckedUpdateInput>
}

/**
 * Chave delete
 */
export type ChaveDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveInclude<ExtArgs> | null
  /**
   * Filter which Chave to delete.
   */
  where: Prisma.ChaveWhereUniqueInput
}

/**
 * Chave deleteMany
 */
export type ChaveDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Chaves to delete
   */
  where?: Prisma.ChaveWhereInput
  /**
   * Limit how many Chaves to delete.
   */
  limit?: number
}

/**
 * Chave.Ambiente
 */
export type Chave$AmbienteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Ambiente
   */
  select?: Prisma.AmbienteSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Ambiente
   */
  omit?: Prisma.AmbienteOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.AmbienteInclude<ExtArgs> | null
  where?: Prisma.AmbienteWhereInput
}

/**
 * Chave.Armario
 */
export type Chave$ArmarioArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Armario
   */
  select?: Prisma.ArmarioSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Armario
   */
  omit?: Prisma.ArmarioOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ArmarioInclude<ExtArgs> | null
  where?: Prisma.ArmarioWhereInput
}

/**
 * Chave.Emprestimo
 */
export type Chave$EmprestimoArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Emprestimo
   */
  select?: Prisma.EmprestimoSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Emprestimo
   */
  omit?: Prisma.EmprestimoOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EmprestimoInclude<ExtArgs> | null
  where?: Prisma.EmprestimoWhereInput
  orderBy?: Prisma.EmprestimoOrderByWithRelationInput | Prisma.EmprestimoOrderByWithRelationInput[]
  cursor?: Prisma.EmprestimoWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EmprestimoScalarFieldEnum | Prisma.EmprestimoScalarFieldEnum[]
}

/**
 * Chave.Chaves_Usuarios
 */
export type Chave$Chaves_UsuariosArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chaves_Usuarios
   */
  select?: Prisma.Chaves_UsuariosSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chaves_Usuarios
   */
  omit?: Prisma.Chaves_UsuariosOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.Chaves_UsuariosInclude<ExtArgs> | null
  where?: Prisma.Chaves_UsuariosWhereInput
  orderBy?: Prisma.Chaves_UsuariosOrderByWithRelationInput | Prisma.Chaves_UsuariosOrderByWithRelationInput[]
  cursor?: Prisma.Chaves_UsuariosWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Chaves_UsuariosScalarFieldEnum | Prisma.Chaves_UsuariosScalarFieldEnum[]
}

/**
 * Chave without action
 */
export type ChaveDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Chave
   */
  select?: Prisma.ChaveSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Chave
   */
  omit?: Prisma.ChaveOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ChaveInclude<ExtArgs> | null
}
